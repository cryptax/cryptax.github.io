<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>hack.lu - Tag - Cryptax&#39;s hand bag</title>
        <link>https://cryptax.github.io/tags/hack.lu/</link>
        <description>hack.lu - Tag - Cryptax&#39;s hand bag</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://cryptax.github.io/tags/hack.lu/" rel="self" type="application/rss+xml" /><item>
    <title>Bad Primes - Hack.Lu CTF 2020</title>
    <link>https://cryptax.github.io/2020-10-28-badprimes/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>cryptax</author>
    <guid>https://cryptax.github.io/2020-10-28-badprimes/</guid>
    <description><![CDATA[Bad Primes  86 solves Easy Category: Crypto Author: midao Description : &ldquo;I thought I understood the RSA primitive but apparently I generated the primitive&rsquo;s primes too primitively&hellip; &quot; 193 points  Understanding the issue The challenge comes with Python code which implements RSA encryption/decryption.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  #!]]></description>
</item>
<item>
    <title>Callboy - Hack.Lu CTF 2020</title>
    <link>https://cryptax.github.io/2020-10-28-callboy/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>cryptax</author>
    <guid>https://cryptax.github.io/2020-10-28-callboy/</guid>
    <description><![CDATA[Callboy  207 solves Baby Category: Misc Author: p4ck3to Description : &ldquo;Have you ever called a Callboy? No!? Then you should definitely try it. To make it a pleasant experience for you, we have recorded a call with our Callboy to help you get started, so that there is no embarrassing silence between you.  PS: do not forget the to wrap flag{} around the secret &quot;
 127 points  An overview of network packets The file we download is a network packet capture.]]></description>
</item>
<item>
    <title>Cobol OTP - Hack.Lu CTF 2019</title>
    <link>https://cryptax.github.io/2019-10-24-cobol/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>cryptax</author>
    <guid>https://cryptax.github.io/2019-10-24-cobol/</guid>
    <description><![CDATA[Cobol OTP Category: Crypto Author: midao Level: easy Solves: 104
Thanks to R. who actually flagged it :)
Description To save the future you have to look at the past. Someone from the inside sent you an access code to a bank account with a lot of money. Can you handle the past and decrypt the code to save the future?
Attached file A zip is provided with:
 otp.cob: a program in Cobol out  1 2  Enter your message to encrypt: ï¿½ï¿½ï¿½y;dhuï¿½ï¿½Fï¿½]UjhCï¿½ï¿½-ï¿½1T`h&amp;ï¿½ï¿½Fï¿½1*T{_ï¿½ï¿½ï¿½p02J   Understanding the Cobol program We understand the Cobol program is performing XOR encryption using a key provided in a keyfille.]]></description>
</item>
<item>
    <title>Flagdroid - Hack.Lu CTF 2020</title>
    <link>https://cryptax.github.io/2020-10-28-flagdroid/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>cryptax</author>
    <guid>https://cryptax.github.io/2020-10-28-flagdroid/</guid>
    <description><![CDATA[Flagdroid  147 solves 153 points Easy Category: Reverse Author: m0ney Text: &ldquo;This app won&rsquo;t let me in without a secret message. Can you do me a favor and find out what it is?&rdquo; Download file: an APK  Analysis of the app We decompile the application. The validation of the flag is done when you press the button check:
1 2 3 4 5 6 7 8 9 10 11 12 13  public void onClick(View arg10) { TextView tvWrong = (TextView)MainActivity.]]></description>
</item>
<item>
    <title>pycoin - Hack.lu 2021</title>
    <link>https://cryptax.github.io/2021-11-04-hacklu-pycoin/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>cryptax</author>
    <guid>https://cryptax.github.io/2021-11-04-hacklu-pycoin/</guid>
    <description><![CDATA[Pycoin - Hack.lu 2021 This is what we know:
1 2 3 4 5 6 7  PYCOIN Sold: 92 times Type: rev Risk: Low Seller: tunn3l A friend gave me this and he says he can not reverse this... but this is just python?   and we get a .pyc file and a hint flag[5] == &quot;5&quot; .
I unfortunately did not solve this challenge on time for the CTF but found it interesting (I got stuck trying to disassemble with dis and did not know xdis did the work).]]></description>
</item>
</channel>
</rss>
